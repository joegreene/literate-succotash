     1                                  ;Author information
     2                                  ;  Author name: Joseph Greene
     3                                  ;  Author email: joeisgreene@csu.fullerton.edu
     4                                  ;  Author location: CSUF
     5                                  ;Project information
     6                                  ;  Project title: Harmonic Series Calculator
     7                                  ;  Purpose: To compute the harmonic sum of an integer divisible by four. Mainly, this program is a means 
     8                                  ;           to test processor performance and optimize speed of the program.
     9                                  ;  Status: Complete
    10                                  ;  Project files: cdriver.cpp, computehsum.asm, time.asm, macros.inc
    11                                  ;Module information
    12                                  ;  File name: asmdriver.asm
    13                                  ;  This module's call name: computehsum (_computehsum if on Mac OS X)
    14                                  ;  Language: X86-64
    15                                  ;  Syntax: Intel
    16                                  ;  Date last modified: 2016-06-02
    17                                  ;  Purpose:  To compute the harmonic sum of a range of integers (that is divisible by 4).
    18                                  ;  Status: Complete
    19                                  ;  Constraints: None
    20                                  ;  Future enhancements: None so far.
    21                                  ;Translator information
    22                                  ;  Linux:  nasm -f elf64 -Ox -l asm_computehsum.lis -o computehsum.o assign6-computehsum.asm
    23                                  ;  MacOSX: nasm -f macho64 -Ox -l asm_computehsum.lis -o computehsum.o assign6-computehsum.asm
    24                                  ;References and credits
    25                                  ;  CS 240 Holliday website (for majority of the macro work)
    26                                  ;Format information
    27                                  ;  Page width: 172 columns
    28                                  ;  Begin comments: 61
    29                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8½x11 paper
    30                                  ;
    31                                  ;========== Global declarations ===========================================================================================================================================
    32                                  
    33                                  %include "general-macros.inc"                               ;This file contains various macros that will be used in this driver
     1                              <1> ;Author information
     2                              <1> ;  Author name: Joseph Greene
     3                              <1> ;  Author email: joeisgreene@csu.fullerton.edu
     4                              <1> ;  Author location: CSUF
     5                              <1> ;Course information
     6                              <1> ;  Course number: CPSC 240
     7                              <1> ;  Assignment number: 6
     8                              <1> ;  Due date: 2015-Apr-23
     9                              <1> ;Project information
    10                              <1> ;  Project title: Harmonic Series Computer
    11                              <1> ;  Purpose: To compute the harmonic sum of an integer divisible by four. Mainly, this program is a means 
    12                              <1> ;           to test processor performance and optimize speed of the program.
    13                              <1> ;  Status: Complete
    14                              <1> ;  Project files: assign6-cdriver.cpp, assign5-computehsum.asm, assign6-time.asm, assign6-macros.inc
    15                              <1> ;Module information
    16                              <1> ;  File name: assign6-macros.inc
    17                              <1> ;  This module's call name: does not apply.
    18                              <1> ;  Language: X86-64
    19                              <1> ;  Syntax: Intel
    20                              <1> ;  Date last modified: 2015-Apr-23
    21                              <1> ;  Purpose: This file hosts all the macros users in the assembly driver program
    22                              <1> ;  Status: Works under required specifications
    23                              <1> ;  Constraints: None
    24                              <1> ;  Future enhancements: None so far.
    25                              <1> ;Translator information
    26                              <1> ;  Does not assemble separately.  This module is assembled when the parent module is assembled.
    27                              <1> ;References and credits
    28                              <1> ;  CS 240 Holliday website (for all the macro work)
    29                              <1> ;Format information
    30                              <1> ;  Page width: 172 columns
    31                              <1> ;  Begin comments: 61
    32                              <1> ;  Optimal print specification: Landscape, 7 points, monospace, 8½x11 paper
    33                              <1> ;
    34                              <1> ;========== Global declarations ===========================================================================================================================================
    35                              <1> 
    36                              <1> segment .data                                               ;Initialized data are declared here
    37                              <1> 
    38                              <1> segment .bss                                                ;Uninitialized data here
    39                              <1> 
    40                              <1> align 64                                                    ;Ensure that next data declaration starts on a 64-byte boundary
    41                              <1> 
    42 00000000 <res 00000340>      <1> savespace     resb 832                                      ;Storage used for xsave and xrstor during middle of program
    43                              <1> 
    44                              <1> ;==========================================================================================================================================================================
    45                              <1> ;========== macro #1: backup GPR ==========================================================================================================================================
    46                              <1> ;==========================================================================================================================================================================
    47                              <1> 
    48                              <1> ;Preconditions: None
    49                              <1> ;Postconditions: None
    50                              <1> 
    51                              <1> %macro backupgpr 0                                          ;Zero indicated that no data will be passed to this macro when it is called.
    52                              <1>   push     rbp                                              ;Save a copy of the stack base pointer
    53                              <1>   mov      rbp, rsp                                         ;This will preserve the linked list of base pointers.
    54                              <1>   push     rbx                                              ;Back up rbx
    55                              <1>   push     rcx                                              ;Back up rcx
    56                              <1>   push     rdx                                              ;Back up rdx
    57                              <1>   push     rsi                                              ;Back up rsi
    58                              <1>   push     rdi                                              ;Back up rdi
    59                              <1>   push     r8                                               ;Back up r8
    60                              <1>   push     r9                                               ;Back up r9
    61                              <1>   push     r10                                              ;Back up r10
    62                              <1>   push     r11                                              ;Back up r11
    63                              <1>   push     r12                                              ;Back up r12
    64                              <1>   push     r13                                              ;Back up r13
    65                              <1>   push     r14                                              ;Back up r14
    66                              <1>   push     r15                                              ;Back up r15
    67                              <1>   pushf                                                     ;Back up rflags
    68                              <1> 
    69                              <1> %endmacro
    70                              <1> 
    71                              <1> ;==========================================================================================================================================================================
    72                              <1> ;========== macro #2: restore GPR =========================================================================================================================================
    73                              <1> ;==========================================================================================================================================================================
    74                              <1> 
    75                              <1> ;Preconditions: None
    76                              <1> ;Postconditions: None
    77                              <1> 
    78                              <1> %macro restoregpr 0                                         ;Zero indicated that no data will be passed to this macro when it is called.
    79                              <1>   popf                                                      ;Restore rflags
    80                              <1>   pop      r15                                              ;Restore r15
    81                              <1>   pop      r14                                              ;Restore r14
    82                              <1>   pop      r13                                              ;Restore r13
    83                              <1>   pop      r12                                              ;Restore r12
    84                              <1>   pop      r11                                              ;Restore r11
    85                              <1>   pop      r10                                              ;Restore r10
    86                              <1>   pop      r9                                               ;Restore r9
    87                              <1>   pop      r8                                               ;Restore r8
    88                              <1>   pop      rdi                                              ;Restore rdi
    89                              <1>   pop      rsi                                              ;Restore rsi
    90                              <1>   pop      rdx                                              ;Restore rdx
    91                              <1>   pop      rcx                                              ;Restore rcx
    92                              <1>   pop      rbx                                              ;Restore rbx
    93                              <1>   pop      rbp                                              ;Restore rbp
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> ;========== End of assign6macros.inc ======================================================================================================================================
    98                              <1> 
    34                                  
    35                                  global _computehsum                                         ;Make this program callable by other programs.
    36                                  
    37                                  segment .data                                               ;Initialized data are declared here
    38                                  
    39 00000000 000000000000F03F00-     numerators        dq 1.0, 1.0, 1.0, 1.0                     ;Numerator values for summation
    39 00000009 0000000000F03F0000-
    39 00000012 00000000F03F000000-
    39 0000001B 000000F03F         
    40 00000020 000000000000084000-     adddenominatorsby dq 3.0, 2.0, 1.0, 0.0                     ;Add (to initial denominators) by this value each
    40 00000029 000000000000400000-
    40 00000032 00000000F03F000000-
    40 0000003B 0000000000         
    41 00000040 000000000000104000-     increment         dq 4.0, 4.0, 4.0, 4.0                     ;Values to increment denominator by
    41 00000049 000000000010400000-
    41 00000052 000000001040000000-
    41 0000005B 0000001040         
    42                                  
    43                                  segment .bss                                                ;Place uninitialized data here
    44                                  
    45                                  align 16
    46                                  ;Nothing in here
    47                                  
    48                                  ;===== Begin executable instructions here =================================================================================================================================
    49                                  
    50                                  segment .text                                               ;Place executable instructions in this segment.
    51                                  
    52                                  _computehsum:                                               ;Entry point.  Execution begins here.
    53                                  
    54                                  ;================= Back up section ========================================================================================================================================
    55                                  backupgpr                                                   ;Macro to back up general purpose registers
    55 00000000 55                  <1>  push rbp
    55 00000001 4889E5              <1>  mov rbp, rsp
    55 00000004 53                  <1>  push rbx
    55 00000005 51                  <1>  push rcx
    55 00000006 52                  <1>  push rdx
    55 00000007 56                  <1>  push rsi
    55 00000008 57                  <1>  push rdi
    55 00000009 4150                <1>  push r8
    55 0000000B 4151                <1>  push r9
    55 0000000D 4152                <1>  push r10
    55 0000000F 4153                <1>  push r11
    55 00000011 4154                <1>  push r12
    55 00000013 4155                <1>  push r13
    55 00000015 4156                <1>  push r14
    55 00000017 4157                <1>  push r15
    55 00000019 9C                  <1>  pushf
    55                              <1> 
    56                                  
    57                                  ;==========================================================================================================================================================================
    58                                  ;===== Begin the application here: do harmonic sum stuff ==================================================================================================================
    59                                  ;==========================================================================================================================================================================
    60                                  
    61                                  ;======== Compute each term via a for loop (assume n > 0) =================================================================================================================
    62                                  
    63                                  ;Preconditions: rdi holds start, rsi holds last term to compute to, rdx holds address to store sum, rcx holds address to store last term
    64                                  ;Postconditions: xmm0 holds the sum, xmm11 holds the last term
    65                                  
    66                                  ;General format (initial values):
    67                                  ;  ymm15 = numerators    = [  1.0  |   1.0   |   1.0   |   1.0   ]
    68                                  ;  ymm14 = denominators  = [ START | START+1 | START+2 | START+3 ] (e.g. first run is 1.0, 2.0, 3.0, 4.0)
    69                                  ;  ymm13 = increments    = [  4.0  |   4.0   |   4.0   |   4.0   ]
    70                                  ;  ymm12 = sums          = [  0.0  |   0.0   |   0.0   |   0.0   ]
    71                                  ;  ymm11 = reciprocals   = [  0.0  |   0.0   |   0.0   |   0.0   ]
    72                                  ;  ...
    73                                  ;
    74                                  
    75 0000001A 48B8-                   mov rax, numerators                                         ;Bug in macho64 won't allow [numerators] dereference
    75 0000001C [0000000000000000] 
    76 00000024 C57D1038                vmovupd    ymm15, [rax]                                     ;Set up numerator values in ymm15 (1.0, 1.0, 1.0, 1.0)
    77                                  
    78 00000028 6A00                    push qword 0                                                ;Reserve a qword on the stack for distributing the denominator
    79 0000002A F24C0F2AF7              cvtsi2sd   xmm14, rdi                                       ;Convert the start integer to a float
    80 0000002F F2440F113424            movsd      [rsp], xmm14                                     ;Move the converted start integer to the top of the stack
    81 00000035 C4627D193424            vbroadcastsd ymm14, [rsp]                                   ;Broadcast the integer-converted float throughout ymm14
    82 0000003B 58                      pop        rax                                              ;Undo push instruction made four instructions previous
    83                                  
    84 0000003C 48B8-                   mov        rax, adddenominatorsby                           ;Bug in macho64 won't allow [adddenominatorsby] dereference directly to ymm14 (this is a workaround)
    84 0000003E [2000000000000000] 
    85 00000046 C50D5830                vaddpd     ymm14, [rax]                                     ;Add to denominators by 0.0, 1.0, 2.0, 3.0 to initialize initial denominators
    86                                  
    87 0000004A 48B8-                   mov        rax, increment                                   ;Bug in macho64 won't allow [increment] dereference directly to ymm13 (this is a workaround)
    87 0000004C [4000000000000000] 
    88 00000054 C57D1028                vmovupd    ymm13, [rax]                                     ;Set up increment value (4.0, 4.0, 4.0, 4.0)
    89 00000058 C4411D57E4              vxorpd     ymm12, ymm12                                     ;Zero-out the accumulating register (initially all zero)
    90 0000005D C4412557DB              vxorpd     ymm11, ymm11                                     ;Zero-out the reciprocal destination (initially all zero)
    91                                  
    92                                  domoreterms:                                                ;Label for term computation loop
    93 00000062 4839F7                    cmp      rdi, rsi                                         ;Compare highest denominator value with number of terms to compute 
    94 00000065 771A                      ja       stopcompute                                      ;Jump out if last term has been computed
    95                                  
    96 00000067 C4417D10DF                vmovupd  ymm11, ymm15                                     ;Copy numerator over for reciprocal calculation
    97 0000006C C441255EDE                vdivpd   ymm11, ymm14                                     ;reciprocal (ymm11) = numerator (temporarily stored in ymm11 from ymm15) / denominator (ymm14)
    98                                  
    99 00000071 C4411D58E3                vaddpd   ymm12, ymm11                                     ;current_sum (ymm12) = old_sum (ymm12) + current terms (ymm11)
   100 00000076 C4410D58F5                vaddpd   ymm14, ymm13                                     ;Increment denominator by 4, i.e. ymm14 = ymm14 (denominators) + ymm13 (increment)
   101                                    
   102 0000007B 4883C704                  add      rdi, 4                                           ;Add four to rdi (as an increment since we're doing 4 operations per iteration)
   103                                  
   104 0000007F EBE1                      jmp      domoreterms                                      ;Jump back up to top of loop to loop again
   105                                  
   106                                  stopcompute:                                                ;Label for ending sum computation
   107                                  
   108                                  ;======== Set return sum (i.e. the sum of all the positions in ymm12) =====================================================================================================
   109                                  
   110 00000081 C4C11D7CC4              vhaddpd    ymm0, ymm12, ymm12                               ;Assume ymm12 = [D|C|B|A]. Now ymm0 equals [D+C|D+C|B+A|B+A]
   111 00000086 C4E37D19C201            vextractf128 xmm2, ymm0, 1                                  ;Move high of ymm0 to xmm2 (i.e. low of ymm2)
   112 0000008C F20F58C2                addsd      xmm0, xmm2                                       ;Now xmm0 equals A+B+C+D
   113                                  
   114                                  ;======== Send value to double reference parameters =======================================================================================================================
   115                                  
   116                                  ;movsd      [rdx], xmm0                                      ;As rdx holds the address to the total_sum in the driver, dereference the address 
   117 00000090 F2440F111A              movsd      [rdx], xmm11                                     ;As rdx holds the address to the last_term in the driver, dereference the address
   118                                  
   119                                  
   120                                  ;==========================================================================================================================================================================
   121                                  ;===== Component Restore ==================================================================================================================================================
   122                                  ;==========================================================================================================================================================================
   123                                  
   124                                  restoregpr                                                  ;Macro to restore general purpose registers
   124 00000095 9D                  <1>  popf
   124 00000096 415F                <1>  pop r15
   124 00000098 415E                <1>  pop r14
   124 0000009A 415D                <1>  pop r13
   124 0000009C 415C                <1>  pop r12
   124 0000009E 415B                <1>  pop r11
   124 000000A0 415A                <1>  pop r10
   124 000000A2 4159                <1>  pop r9
   124 000000A4 4158                <1>  pop r8
   124 000000A6 5F                  <1>  pop rdi
   124 000000A7 5E                  <1>  pop rsi
   124 000000A8 5A                  <1>  pop rdx
   124 000000A9 59                  <1>  pop rcx
   124 000000AA 5B                  <1>  pop rbx
   124 000000AB 5D                  <1>  pop rbp
   124                              <1> 
   125                                  
   126 000000AC C3                      ret                                                         ;Return back to caller
